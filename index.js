const TelegramApi = require('node-telegram-bot-api');
const token = '5470988261:AAFRfk8pMzCDV0dSq9SXDnhxL5M3DobDKu8';
const bot = new TelegramApi(token, { polling: true });
const sequelize = require('./db');
const ChatModel = require('./models/ChatModel');
const QuestionModel = require('./models/QuestionModel');
const ActionModel = require('./models/ActionModel');
const { CALLBACK_CODE } = require('./constants');

const {
  gameOptions,
  againOptions,
  truthOrDareOptions,
  addTruthOrDareOptions,
} = require('./options');

const chats = {};
const waiting = [];

// –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ

const startGame = async (chatId) => {
  await bot.sendMessage(
    chatId,
    `–°–µ–π—á–∞—Å –π –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ—ë –æ—Ç–≥–∞–¥–∞—Ç—å!`
  );
  const randomNumber = Math.floor(Math.random() * 10);
  chats[chatId] = randomNumber;
  await bot.sendMessage(chatId, `–û—Ç–≥–∞–¥—ã–≤–∞–π...`, gameOptions);
};

const addItem = async (chatId) => {
  await bot.sendMessage(
    chatId,
    `üîë –¢—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?`,
    addTruthOrDareOptions
  );
};

const addAction = async (chatId) => {
  await bot.sendMessage(
    chatId,
    `–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–∑–≤–æ–Ω–∏ –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é –∏ –∑–∞–∫–∞–∂–∏ –ø–∏—Ü—Ü—É –Ω–∞ –ú–∞—Ä—Å!"`
  );
  waiting.push({
    chatId,
    type: CALLBACK_CODE.ADD_ACTION,
  });
};

const addQuestion = async (chatId) => {
  await bot.sendMessage(
    chatId,
    `–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ö—É–¥–∞ —Ç—ã –∑–∞—Å–æ–≤—ã–≤–∞–ª —à–ø–∞—Ä–≥–∞–ª–∫–∏?"`
  );
  waiting.push({
    chatId,
    type: CALLBACK_CODE.ADD_QUESTION,
  });
};

// –≥–ª–∞–≤–Ω—ã–π –ª—É–ø

const start = async () => {
  //
  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  //
  try {
    await sequelize.authenticate();
  } catch (error) {
    console.log('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –ë–î —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—à–∏–±–∫–∞: \n ', error);
  }
  try {
    await sequelize.sync({ alter: true }); // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–¥–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –≤ –ë–î
  } catch (error) {
    console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ –ë–î —Å–ª–æ–º–∞–ª–∞—Å—å, –æ—à–∏–±–∫–∞: \n ', error);
  }

  //
  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥
  //
  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
    { command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É' },
  ]);

  //
  // —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  //
  bot.on('message', async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    // const username = msg.from.username;

    try {
      if (waiting.find((el) => el.chatId === chatId)) {
        // –∑–∞–∫—Ä—ã—Ç–∞—è –≤–µ—Ç–∫–∞ (–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)

        console.log('\n\nwaiting not empty....\n\n', waiting);

        if (waiting.find((el) => el.type === CALLBACK_CODE.ADD_ACTION)) {
          console.log('\n\nadding new action....\n\n');
          const addedItem = await ActionModel.create({ text: msg.text });
          await addedItem.save();
          console.log('added new item to database: \n', addedItem);
        }

        if (waiting.find((el) => el.type === CALLBACK_CODE.ADD_QUESTION)) {
          console.log('\n\nadding new question....\n\n');
          const addedItem = await QuestionModel.create({ text: msg.text });
          await addedItem.save();
          console.log('added new item to database: \n', addedItem);
        }

        // Send reply
        //bot.sendMessage(chatId, '–î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ? \n\n ' + msg.text);

        // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        waiting.splice(
          waiting.findIndex((el) => el.chatId === chatId),
          1
        );
      } else {
        // –æ—Ç–∫—Ä—ã—Ç–∞—è –≤–µ—Ç–∫–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
        if (text === '/start') {
          const chat = await ChatModel.findOne({ chatId });
          if (!chat) {
            await ChatModel.create({ chatId }); // –≤–æ—Ç –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç
          }

          await bot.sendSticker(
            chatId,
            'https://tlgrm.eu/_/stickers/1b5/0ab/1b50abf8-8451-40ca-be37-ffd7aa74ec4d/12.webp'
          );
          return bot.sendMessage(
            chatId,
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, —è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ"`
          );
        }

        if (text === '/info') {
          const chat = await ChatModel.findOne({ chatId }); // –≤–æ—Ç —Ç—É—Ç –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
          return bot.sendMessage(
            chatId,
            `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} ${msg.from.last_name}. –í –∏–≥—Ä–µ —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${chat.right}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${chat.wrong}`
          );
        }

        if (text === '/game') {
          return startGame(chatId);
        }

        if (text === '/add_item') {
          return addItem(chatId);
        }

        if (text === '/print_chat_id') {
          await bot.sendMessage(chatId, `–•–∑ —á—Ç–æ —ç—Ç–æ: ${msg.from.id}`);
          return bot.sendMessage(chatId, `–ù–æ–º–µ—Ä —á–∞—Ç–∞: ${msg.chat.id}`);
        }

        // return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!');
        return;
      }
    } catch (error) {
      console.log(error);
      return bot.sendMessage(chatId, `–£–ø—Å, –æ—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞!`);
    }
  });

  // —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏

  bot.on('callback_query', async (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;

    if (data === CALLBACK_CODE.ADD_ACTION) {
      return addAction(chatId);
    }

    if (data === CALLBACK_CODE.ADD_QUESTION) {
      return addQuestion(chatId);
    }

    if (data === '/again') {
      return startGame(chatId);
    }

    const chat = await ChatModel.findOne({ chatId }); // –∏ —Ç—É—Ç –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å

    if (data == chats[chatId]) {
      chat.right += 1;
      await bot.sendMessage(
        chatId,
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`,
        againOptions
      );
    } else {
      chat.wrong += 1;
      await bot.sendMessage(
        chatId,
        `–£–≤—ã, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`,
        againOptions
      );
    }
    await chat.save(); // –≤–æ—Ç —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
  });
};

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

start();
